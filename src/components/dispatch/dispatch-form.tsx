"use client";

import { useState } from 'react';
import { policeETAPrediction } from '@/ai/flows/police-eta-prediction';
import type { PoliceETAPredictionClientInput, PoliceETAPredictionOutput } from '@/types';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from '@/hooks/use-toast';
import { useGeolocation, type UseGeolocationState } from '@/hooks/use-geolocation';
import { EmergencyContactBadge } from '@/components/shared/emergency-contact-badge';
import { LoadingSpinner } from '@/components/shared/loading-spinner';
import { EtaCard } from './eta-card';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Send, MapPin } from 'lucide-react';
import { useLocalStorage } from '@/hooks/use-local-storage';
import type { EmergencyContact } from '@/types';

// Mock data for nearest police station for simplicity
const MOCK_NEAREST_POLICE_STATION = {
  name: "Central Dispatch Unit",
  latitude: 34.0522,
  longitude: -118.2437,
};


export function DispatchForm() {
  const [destination, setDestination] = useState('');
  const [vehicleAvailability, setVehicleAvailability] = useState('Available');
  const [trafficConditions, setTrafficConditions] = useState('Moderate');
  
  const [isLoading, setIsLoading] = useState(false);
  const [etaDetails, setEtaDetails] = useState<PoliceETAPredictionOutput | null>(null);
  const { toast } = useToast();
  const geolocation: UseGeolocationState = useGeolocation();
  const [contacts] = useLocalStorage<EmergencyContact[]>('emergencyContacts', []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!destination.trim()) {
      toast({ title: "Destination Required", description: "Please enter your destination.", variant: "destructive" });
      return;
    }
    if (!geolocation.coordinates) {
      toast({ title: "Location Error", description: "Could not get your current location. Please ensure location services are enabled.", variant: "destructive" });
      return;
    }
    if (contacts.length === 0) {
        toast({
            title: "Cannot Request Dispatch",
            description: "Please add emergency contacts in settings first. They will be notified.",
            variant: "destructive",
        });
        return;
    }

    setIsLoading(true);
    setEtaDetails(null);

    const input: PoliceETAPredictionClientInput = {
      userLocation: {
        latitude: geolocation.coordinates.latitude,
        longitude: geolocation.coordinates.longitude,
      },
      destination,
      policeStationLocation: {
        latitude: MOCK_NEAREST_POLICE_STATION.latitude,
        longitude: MOCK_NEAREST_POLICE_STATION.longitude,
      },
      vehicleAvailability,
      trafficConditions,
      // Officer name and vehicle number will be generated by AI
      policeOfficerName: "", 
      policeVehicleNumber: "",
    };
    
    try {
      const result = await policeETAPrediction({
        userLocation: `${input.userLocation.latitude},${input.userLocation.longitude}`,
        destination: input.destination,
        policeStationLocation: `${input.policeStationLocation.latitude},${input.policeStationLocation.longitude}`,
        vehicleAvailability: input.vehicleAvailability,
        trafficConditions: input.trafficConditions,
        policeOfficerName: input.policeOfficerName || "",
        policeVehicleNumber: input.policeVehicleNumber || "",
      });
      setEtaDetails(result);
      toast({
        title: 'Dispatch Requested Successfully!',
        description: `ETA and officer details are now displayed. Emergency contacts notified. (Simulation)`,
      });
      
      // Simulate notifying emergency contacts
      const contactDetails = contacts.map(c => `${c.name} (${c.phone})`).join(', ');
      const locationString = `Lat: ${input.userLocation.latitude.toFixed(5)}, Lon: ${input.userLocation.longitude.toFixed(5)}`;
      toast({
        title: 'Emergency Contacts Notified (Simulation)',
        description: `Details sent to: ${contactDetails || 'your emergency contacts'}. Location: ${locationString}, Destination: ${destination}.`,
        duration: 10000,
      });

    } catch (error) {
      console.error("Error fetching ETA:", error);
      toast({
        title: 'Error Requesting Dispatch',
        description: error instanceof Error ? error.message : 'An unknown error occurred.',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="shadow-xl">
      <CardHeader>
        <CardTitle className="text-3xl font-bold text-primary">Request Police Dispatch</CardTitle>
        <CardDescription className="text-base">
          Fill in the details below to request a police vehicle for safe transportation.
          Your current location will be shared automatically.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <EmergencyContactBadge actionDescription="a dispatch is requested" />

        {geolocation.loading && (
          <div className="flex items-center text-muted-foreground">
            <LoadingSpinner size={20} className="mr-2"/> Acquiring your location...
          </div>
        )}
        {geolocation.error && <p className="text-red-500 text-sm">Location Error: {geolocation.error.message}</p>}
        {geolocation.coordinates && (
          <div className="text-sm text-muted-foreground p-3 bg-muted rounded-md">
            <p className="flex items-center gap-1"><MapPin className="w-4 h-4 text-primary"/> Current Location:</p>
            <p>Lat: {geolocation.coordinates.latitude.toFixed(5)}, Lon: {geolocation.coordinates.longitude.toFixed(5)}</p>
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="destination" className="block mb-1 font-semibold">Your Destination</Label>
            <Input
              id="destination"
              type="text"
              value={destination}
              onChange={(e) => setDestination(e.target.value)}
              placeholder="e.g., 123 Safe House Rd, Cityville"
              required
              disabled={isLoading}
              aria-label="Your Destination"
            />
          </div>

          {/* These fields are for simulation purposes for the AI model */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
                <Label htmlFor="vehicle-availability" className="block mb-1 font-semibold">Vehicle Availability (Simulation)</Label>
                <Select value={vehicleAvailability} onValueChange={setVehicleAvailability} disabled={isLoading}>
                    <SelectTrigger id="vehicle-availability"><SelectValue placeholder="Select availability" /></SelectTrigger>
                    <SelectContent>
                        <SelectItem value="Available">Available</SelectItem>
                        <SelectItem value="Limited">Limited</SelectItem>
                        <SelectItem value="Unavailable">Unavailable</SelectItem>
                    </SelectContent>
                </Select>
            </div>
            <div>
                <Label htmlFor="traffic-conditions" className="block mb-1 font-semibold">Traffic Conditions (Simulation)</Label>
                <Select value={trafficConditions} onValueChange={setTrafficConditions} disabled={isLoading}>
                    <SelectTrigger id="traffic-conditions"><SelectValue placeholder="Select traffic" /></SelectTrigger>
                    <SelectContent>
                        <SelectItem value="Light">Light</SelectItem>
                        <SelectItem value="Moderate">Moderate</SelectItem>
                        <SelectItem value="Heavy">Heavy</SelectItem>
                    </SelectContent>
                </Select>
            </div>
          </div>
          
          <Button 
            type="submit" 
            disabled={isLoading || geolocation.loading || !geolocation.coordinates || contacts.length === 0} 
            className="w-full text-lg py-6 rounded-lg shadow-md hover:shadow-lg transition-shadow"
            aria-label="Confirm Dispatch Request"
          >
            {isLoading ? (
              <LoadingSpinner className="mr-2" />
            ) : (
              <Send className="w-5 h-5 mr-2" />
            )}
            {isLoading ? 'Requesting...' : 'Confirm Dispatch Request'}
          </Button>
        </form>

        {etaDetails && <EtaCard etaDetails={etaDetails} />}
      </CardContent>
    </Card>
  );
}
